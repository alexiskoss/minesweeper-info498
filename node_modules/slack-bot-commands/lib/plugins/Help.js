'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Command = require('../Command');

var commandHelpTemplate = function commandHelpTemplate(command) {
	return command.testRegex ? command.name + ': ' + command.testRegex.toString() + ': ' + command.explanation + '\n' : 'I have no test regex for ' + command.name + '! You should talk to your friendly dev about that.';
};

var Help = function (_Command) {
	(0, _inherits3.default)(Help, _Command);

	function Help(message, commands) {
		(0, _classCallCheck3.default)(this, Help);

		var _this = (0, _possibleConstructorReturn3.default)(this, (Help.__proto__ || (0, _getPrototypeOf2.default)(Help)).call(this, message));

		_this.commands = commands;
		_this.testRegex = /^bot help/i;
		_this.name = 'Help!';
		return _this;
	}

	(0, _createClass3.default)(Help, [{
		key: 'action',
		value: function () {
			var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								return _context.abrupt('return', 'The available commands are:\n\t\t' + this.commands.reduce(function (acc, command) {
									return acc.concat(commandHelpTemplate(command));
								}, ''));

							case 1:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			}));

			function action() {
				return _ref.apply(this, arguments);
			}

			return action;
		}()
	}]);
	return Help;
}(Command);

module.exports = Help;