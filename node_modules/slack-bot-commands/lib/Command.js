'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var slack = require('slack');
var token = process.env.SLACK_TOKEN;

module.exports = function () {
	function Command(_ref) {
		var text = _ref.text,
		    user = _ref.user,
		    channel = _ref.channel;
		(0, _classCallCheck3.default)(this, Command);

		this.text = text;
		this.userId = user;
		this.channelId = channel;
		this.explanation = 'This command has no explanation yet, sorry!';
		this.name = 'The Unnamed Command';
	}

	(0, _createClass3.default)(Command, [{
		key: 'test',
		value: function test() {
			if (!this.testRegex) return false;
			return this.testRegex.test(this.text);
		}
	}, {
		key: 'action',
		value: function action() {
			return 'This action has not been defined';
		}
	}, {
		key: 'response',
		value: function response(returnMessage) {
			slack.chat.postMessage({ text: returnMessage, channel: this.channelId, token: token },
			// postMessage requires a callback
			console.log);
		}
	}, {
		key: 'run',
		value: function () {
			var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
				var returnMessage;
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								if (!this.test()) {
									_context.next = 5;
									break;
								}

								_context.next = 3;
								return this.action();

							case 3:
								returnMessage = _context.sent;

								if (returnMessage) {
									this.response(returnMessage);
								}

							case 5:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this);
			}));

			function run() {
				return _ref2.apply(this, arguments);
			}

			return run;
		}()
	}]);
	return Command;
}();